/*背包问题求方案数
有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。

第 i 件物品的体积是 vi，价值是 wi。

求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。

输出 最优选法的方案数。注意答案可能很大，请输出答案模 109+7 的结果。

输入格式
第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。

接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。

输出格式
输出一个整数，表示 方案数 模 109+7 的结果。

数据范围
0<N,V≤1000
0<vi,wi≤1000
输入样例
4 5
1 2
2 4
3 4
4 6
输出样例：
2

思路：
不管是什么背包，只要在迭代dp时把此时体积对应的方案数更新一下就行。
为此新开一个cnt数组，记录不同体积时的方案数。体积为0时的方案数为1.
但注意此时dp的初始化有区别，dp[0] = 0, dp[1...m] = -inf。
以此确保所有状态都从dp[0]转移出来，且dp[v]表示体积恰好是v时可以获得的最大价值。
最后遍历dp，找出dp[i]==dp[m]的i，累加cnt[i]并取余即为答案。
*/

#include<iostream>
#include<algorithm>
using namespace std; 

const int maxn = 1005;
const int mod = 1e9 + 7;
const int inf = 0x7ffffff * -1;

int dp[maxn], cnt[maxn];

int main() {
	int n, m, w, c;
	fill(dp, dp + maxn, inf);
	dp[0] = 0;
	cnt[0] = 1;
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		cin >> w >> c;
		for (int v = m; v >= w; v--) {
			int t = max(dp[v], dp[v - w] + c);
			int s = 0;
			if (t == dp[v])s += cnt[v];
			s = s % mod;
			if (t == dp[v - w] + c)s += cnt[v - w];
			s = s % mod;
			dp[v] = t;
			cnt[v] = s;
		}
	}

	int res = 0;
	int maxv = dp[m];
	for (int i = 0; i <= m; i++) {
		if (dp[i] == maxv)
			res = (res + cnt[i]) % mod;
	}
	cout << res << endl;
	return 0;
}
