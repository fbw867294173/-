/*混合背包

有 N 种物品和一个容量是 V 的背包。

物品一共有三类：

第一类物品只能用1次（01背包）；
第二类物品可以用无限次（完全背包）；
第三类物品最多只能用 si 次（多重背包）；
每种体积是 vi，价值是 wi。

求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。
输出最大价值。

输入格式
第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。

接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。

si=−1 表示第 i 种物品只能用1次；
si=0 表示第 i 种物品可以用无限次；
si>0 表示第 i 种物品可以使用 si 次；
输出格式
输出一个整数，表示最大价值。

数据范围
0<N,V≤1000
0<vi,wi≤1000
−1≤si≤1000
输入样例
4 5
1 2 -1
2 4 1
3 4 0
4 5 2
输出样例：
8

思路：
按不同的类型分类迭代就好了。要注意的是多重背包要先保存成打包形式，在参与迭代。
而另外两种背包直接保存下来。
牢记每一种物品是一个阶段性状态。
*/

#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

struct node {
	int w, c, s;
};

const int maxn = 1005;
int dp[maxn];
vector<node>list;

int main() {
	int n, m;
	cin >> n >> m;
	int w, c, s;
	for (int i = 0; i < n; i++) {
		cin >> w >> c >> s;
		if (s == 0)list.push_back({ w, c, 0 });
		else if (s < 0)list.push_back({ w, c, -1 });
		else {
			for (int j = 1; j <= s; j *= 2) {
				list.push_back({ w*j,c*j,1 });
				s -= j;
			}
			if (s > 0)list.push_back({ s*w,s*c,1 });
		}
	}
	for (auto good : list) {
		if (good.s != 0) {
			for (int v = m; v >= good.w; v--)
				dp[v] = max(dp[v], dp[v - good.w] + good.c);
		}
		else{
			for(int v=good.w;v<=m;v++)
				dp[v] = max(dp[v], dp[v - good.w] + good.c);
		}
	}
	cout << dp[m] << endl;
	return 0;
}
